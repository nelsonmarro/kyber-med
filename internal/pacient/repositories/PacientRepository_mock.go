// Code generated by mockery v2.50.4. DO NOT EDIT.

package repositories

import (
	entities "github.com/nelsonmarro/kyber-med/internal/pacient/entities"
	mock "github.com/stretchr/testify/mock"

	commondtos "github.com/nelsonmarro/kyber-med/common/commondtos"
)

// MockPacientRepository is an autogenerated mock type for the PacientRepository type
type MockPacientRepository struct {
	mock.Mock
}

type MockPacientRepository_Expecter struct {
	mock *mock.Mock
}

func (_m *MockPacientRepository) EXPECT() *MockPacientRepository_Expecter {
	return &MockPacientRepository_Expecter{mock: &_m.Mock}
}

// FindByCursor provides a mock function with given fields: cursor, limit, sortOrder
func (_m *MockPacientRepository) FindByCursor(cursor string, limit int, sortOrder string) ([]entities.Pacient, commondtos.PaginationInfo, error) {
	ret := _m.Called(cursor, limit, sortOrder)

	if len(ret) == 0 {
		panic("no return value specified for FindByCursor")
	}

	var r0 []entities.Pacient
	var r1 commondtos.PaginationInfo
	var r2 error
	if rf, ok := ret.Get(0).(func(string, int, string) ([]entities.Pacient, commondtos.PaginationInfo, error)); ok {
		return rf(cursor, limit, sortOrder)
	}
	if rf, ok := ret.Get(0).(func(string, int, string) []entities.Pacient); ok {
		r0 = rf(cursor, limit, sortOrder)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entities.Pacient)
		}
	}

	if rf, ok := ret.Get(1).(func(string, int, string) commondtos.PaginationInfo); ok {
		r1 = rf(cursor, limit, sortOrder)
	} else {
		r1 = ret.Get(1).(commondtos.PaginationInfo)
	}

	if rf, ok := ret.Get(2).(func(string, int, string) error); ok {
		r2 = rf(cursor, limit, sortOrder)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockPacientRepository_FindByCursor_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'FindByCursor'
type MockPacientRepository_FindByCursor_Call struct {
	*mock.Call
}

// FindByCursor is a helper method to define mock.On call
//   - cursor string
//   - limit int
//   - sortOrder string
func (_e *MockPacientRepository_Expecter) FindByCursor(cursor interface{}, limit interface{}, sortOrder interface{}) *MockPacientRepository_FindByCursor_Call {
	return &MockPacientRepository_FindByCursor_Call{Call: _e.mock.On("FindByCursor", cursor, limit, sortOrder)}
}

func (_c *MockPacientRepository_FindByCursor_Call) Run(run func(cursor string, limit int, sortOrder string)) *MockPacientRepository_FindByCursor_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(string), args[1].(int), args[2].(string))
	})
	return _c
}

func (_c *MockPacientRepository_FindByCursor_Call) Return(data []entities.Pacient, pagination commondtos.PaginationInfo, err error) *MockPacientRepository_FindByCursor_Call {
	_c.Call.Return(data, pagination, err)
	return _c
}

func (_c *MockPacientRepository_FindByCursor_Call) RunAndReturn(run func(string, int, string) ([]entities.Pacient, commondtos.PaginationInfo, error)) *MockPacientRepository_FindByCursor_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockPacientRepository creates a new instance of MockPacientRepository. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockPacientRepository(t interface {
	mock.TestingT
	Cleanup(func())
},
) *MockPacientRepository {
	mock := &MockPacientRepository{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
